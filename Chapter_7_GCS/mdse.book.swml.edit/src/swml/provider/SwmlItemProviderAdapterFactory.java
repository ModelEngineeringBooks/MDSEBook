/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package swml.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import swml.util.SwmlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SwmlItemProviderAdapterFactory extends SwmlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable
{
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwmlItemProviderAdapterFactory()
  {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.WebModel} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WebModelItemProvider webModelItemProvider;

  /**
   * This creates an adapter for a {@link swml.WebModel}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createWebModelAdapter()
  {
    if (webModelItemProvider == null)
    {
      webModelItemProvider = new WebModelItemProvider(this);
    }

    return webModelItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.HypertextLayer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HypertextLayerItemProvider hypertextLayerItemProvider;

  /**
   * This creates an adapter for a {@link swml.HypertextLayer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createHypertextLayerAdapter()
  {
    if (hypertextLayerItemProvider == null)
    {
      hypertextLayerItemProvider = new HypertextLayerItemProvider(this);
    }

    return hypertextLayerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.ContentLayer} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContentLayerItemProvider contentLayerItemProvider;

  /**
   * This creates an adapter for a {@link swml.ContentLayer}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContentLayerAdapter()
  {
    if (contentLayerItemProvider == null)
    {
      contentLayerItemProvider = new ContentLayerItemProvider(this);
    }

    return contentLayerItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.Class} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassItemProvider classItemProvider;

  /**
   * This creates an adapter for a {@link swml.Class}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassAdapter()
  {
    if (classItemProvider == null)
    {
      classItemProvider = new ClassItemProvider(this);
    }

    return classItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.Attribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link swml.Attribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter()
  {
    if (attributeItemProvider == null)
    {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.IndexPage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IndexPageItemProvider indexPageItemProvider;

  /**
   * This creates an adapter for a {@link swml.IndexPage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createIndexPageAdapter()
  {
    if (indexPageItemProvider == null)
    {
      indexPageItemProvider = new IndexPageItemProvider(this);
    }

    return indexPageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.DetailsPage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DetailsPageItemProvider detailsPageItemProvider;

  /**
   * This creates an adapter for a {@link swml.DetailsPage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createDetailsPageAdapter()
  {
    if (detailsPageItemProvider == null)
    {
      detailsPageItemProvider = new DetailsPageItemProvider(this);
    }

    return detailsPageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.StaticPage} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected StaticPageItemProvider staticPageItemProvider;

  /**
   * This creates an adapter for a {@link swml.StaticPage}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStaticPageAdapter()
  {
    if (staticPageItemProvider == null)
    {
      staticPageItemProvider = new StaticPageItemProvider(this);
    }

    return staticPageItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.NCLink} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NCLinkItemProvider ncLinkItemProvider;

  /**
   * This creates an adapter for a {@link swml.NCLink}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNCLinkAdapter()
  {
    if (ncLinkItemProvider == null)
    {
      ncLinkItemProvider = new NCLinkItemProvider(this);
    }

    return ncLinkItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link swml.CLink} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CLinkItemProvider cLinkItemProvider;

  /**
   * This creates an adapter for a {@link swml.CLink}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCLinkAdapter()
  {
    if (cLinkItemProvider == null)
    {
      cLinkItemProvider = new CLinkItemProvider(this);
    }

    return cLinkItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory()
  {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
  {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type)
  {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type)
  {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type)
  {
    if (isFactoryForType(type))
    {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
      {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener)
  {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification)
  {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null)
    {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose()
  {
    if (webModelItemProvider != null) webModelItemProvider.dispose();
    if (hypertextLayerItemProvider != null) hypertextLayerItemProvider.dispose();
    if (contentLayerItemProvider != null) contentLayerItemProvider.dispose();
    if (classItemProvider != null) classItemProvider.dispose();
    if (attributeItemProvider != null) attributeItemProvider.dispose();
    if (indexPageItemProvider != null) indexPageItemProvider.dispose();
    if (detailsPageItemProvider != null) detailsPageItemProvider.dispose();
    if (staticPageItemProvider != null) staticPageItemProvider.dispose();
    if (ncLinkItemProvider != null) ncLinkItemProvider.dispose();
    if (cLinkItemProvider != null) cLinkItemProvider.dispose();
  }

}
